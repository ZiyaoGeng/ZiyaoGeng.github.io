<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Tensorflow1.x基础</title>
    <link href="/2022/03/27/Tensorflow/Tensorflow1.x%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/03/27/Tensorflow/Tensorflow1.x%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Tensorflow1-x基础"><a href="#Tensorflow1-x基础" class="headerlink" title="Tensorflow1.x基础"></a>Tensorflow1.x基础</h1><p>Tensorflow的基础架构图如下：</p><img src="https://gzy-gallery.oss-cn-shanghai.aliyuncs.com/img/20220326152401.png" style="display:block;margin:0 auto;zoom: 40%;"><h2 id="计算图"><a href="#计算图" class="headerlink" title="计算图"></a>计算图</h2><p>计算图模型由节点（nodes）和边（edges）组成。节点表示操作符Operator，或者称之为算子，边表示计算间的依赖，实线表示有数据传递依赖，传递的数据即张量，虚线通常可以表示控制依赖，即执行先后顺序。</p><img src="https://gzy-gallery.oss-cn-shanghai.aliyuncs.com/img/20220327210552.png" style="display:block;margin:0 auto;zoom: 40%;"><p>Tensorflow1.x主要是用于<strong>处理静态计算图的框架</strong>，图形配置分为两个阶段：</p><ul><li>（1）创建计算图</li><li>（2）赋值，多次用Session运行计算图；<br>Session计算的过程实际上就是数据流经整个图，计算出每一个节点的数值。<strong>在Tensorflow中，一切Variable对象必须运行过初始化才能参与计算</strong>。</li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>1、<strong>可更新的参数</strong>：Variable</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs python">tf.Variable(initial_value=<span class="hljs-literal">None</span>, trainable=<span class="hljs-literal">None</span>, collections=<span class="hljs-literal">None</span>, validate_shape=<span class="hljs-literal">True</span>, caching_device=<span class="hljs-literal">None</span>, name=<span class="hljs-literal">None</span>, variable_def=<span class="hljs-literal">None</span>, dtype=<span class="hljs-literal">None</span>, expected_shape=<span class="hljs-literal">None</span>, import_scope=<span class="hljs-literal">None</span>, constraint=<span class="hljs-literal">None</span>, use_resource=<span class="hljs-literal">None</span>, synchronization=tf.VariableSynchronization.AUTO,    aggregation=tf.VariableAggregation.NONE, shape=<span class="hljs-literal">None</span>)<br></code></pre></td></tr></table></figure><ul><li>initial_value：初识参数；</li><li>trainable：是否可训练（True｜False）；</li><li>name；</li><li>dtype；</li><li>shape；</li></ul><p>在使用之前，需要先使用一个函数来初始化所有变量。启动图后，才开始运行Op：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">W = tf.Variable(<span class="hljs-number">1</span>)<br><span class="hljs-comment"># Add an Op to initialize global variables.</span><br>init_op = tf.global_variables_initializer()<br><br><span class="hljs-comment"># Launch the graph in a session.</span><br><span class="hljs-keyword">with</span> tf.Session() <span class="hljs-keyword">as</span> sess:<br>    <span class="hljs-comment"># Run the Op that initializes global variables.</span><br>    sess.run(init_op)<br>    sess.run(W)<br>    <span class="hljs-comment"># ...you can now run any Op that uses variable values...</span><br></code></pre></td></tr></table></figure><p>2、<strong>占位符</strong>：placeholder，为一个总是被提供的张量（数据）插入一个占位符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">tf.placeholder(dtype, shape=<span class="hljs-literal">None</span>, name=<span class="hljs-literal">None</span>)<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">x = tf.placeholder(tf.float32)<br>linear_model = W * x + b<br>W = tf.constant(<span class="hljs-number">1.0</span>)<br>b = tf.constant(<span class="hljs-number">0.0</span>)<br>linear_model = W * x + b<br><br><span class="hljs-keyword">with</span> tf.Session() <span class="hljs-keyword">as</span> sess:<br>sess.run(linear_model, &#123;x: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]&#125;)<br><span class="hljs-comment"># array([1., 2., 3., 4., 5.], dtype=float32)</span><br></code></pre></td></tr></table></figure><p>3、<strong>常量</strong>：constant</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">tf.constant(value, dtype=<span class="hljs-literal">None</span>, shape=<span class="hljs-literal">None</span>, name=<span class="hljs-string">&#x27;Const&#x27;</span>, verify_shape=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Tensorflow</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tensorflow</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基础SQL</title>
    <link href="/2022/03/21/%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/%E5%9F%BA%E7%A1%80SQL%E8%AF%AD%E5%8F%A5/"/>
    <url>/2022/03/21/%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/%E5%9F%BA%E7%A1%80SQL%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="基础SQL"><a href="#基础SQL" class="headerlink" title="基础SQL"></a>基础SQL</h1><p>一些常用的SQL标识符或者函数的介绍。</p><h2 id="1、DISTINCT"><a href="#1、DISTINCT" class="headerlink" title="1、DISTINCT"></a>1、DISTINCT</h2><p>DISTINCT关键词用于返回唯一不同的值。</p><figure class="highlight sql"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> _column_name_,_column_name_  <br><span class="hljs-keyword">FROM</span> _table_name_;<br></code></pre></td></tr></table></figure><h2 id="2、LIMIT"><a href="#2、LIMIT" class="headerlink" title="2、LIMIT"></a>2、LIMIT</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> _column_name_,_column_name_ <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">table</span> [LIMIT N] [<span class="hljs-keyword">offset</span> M]<br></code></pre></td></tr></table></figure><ul><li>limit N：返回 N 条记录；</li><li>limit N,M：从第 N 条记录开始, 返回 M 条记录；</li></ul><h2 id="3、NULL"><a href="#3、NULL" class="headerlink" title="3、NULL"></a>3、NULL</h2><p><strong>IS NULL</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> LastName,FirstName,Address <span class="hljs-keyword">FROM</span> Persons  <br><span class="hljs-keyword">WHERE</span> Address <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span><br></code></pre></td></tr></table></figure><p><strong>IS NOT NULL</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> LastName,FirstName,Address <span class="hljs-keyword">FROM</span> Persons  <br><span class="hljs-keyword">WHERE</span> Address <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br></code></pre></td></tr></table></figure><h2 id="4、HAVING"><a href="#4、HAVING" class="headerlink" title="4、HAVING"></a>4、HAVING</h2><p>在 SQL 中增加 HAVING 子句原因是，WHERE 关键字无法与聚合函数一起使用。<strong>HAVING 子句可以筛选分组后的各组数据</strong>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> column_name, aggregate_function(column_name)<br><span class="hljs-keyword">FROM</span> table_name<br><span class="hljs-keyword">WHERE</span> column_name operator <span class="hljs-keyword">value</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> column_name<br><span class="hljs-keyword">HAVING</span> aggregate_function(column_name) operator <span class="hljs-keyword">value</span>;<br></code></pre></td></tr></table></figure><h2 id="5、ORDER-BY"><a href="#5、ORDER-BY" class="headerlink" title="5、ORDER BY"></a>5、ORDER BY</h2><p>ORDER BY关键字用于对结果集按照一个列或者多个列进行排序。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> column_name,column_name<br><span class="hljs-keyword">FROM</span> table_name<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> column_name,column_name <span class="hljs-keyword">ASC</span><span class="hljs-operator">|</span><span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure><h2 id="6、GROUP-BY"><a href="#6、GROUP-BY" class="headerlink" title="6、GROUP BY"></a>6、GROUP BY</h2><p>GROUP BY语句用于结合聚合函数，根据一个或多个列对结果集进行分组。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> column_name, aggregate_function(column_name)  <br><span class="hljs-keyword">FROM</span> table_name  <br><span class="hljs-keyword">WHERE</span> column_name operator <span class="hljs-keyword">value</span>  <br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> column_name;<br></code></pre></td></tr></table></figure><h2 id="7、ROUND"><a href="#7、ROUND" class="headerlink" title="7、ROUND"></a>7、ROUND</h2><p>ROUND()函数用于把数值字段舍入为指定的小数位数。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> ROUND(column_name,decimals) <span class="hljs-keyword">FROM</span> TABLE_NAME;<br></code></pre></td></tr></table></figure><h2 id="8、EXISTS"><a href="#8、EXISTS" class="headerlink" title="8、EXISTS"></a>8、EXISTS</h2><p>EXISTS运算符用于判断查询子句是否有记录，如果有一条或多条记录存在返回 True，否则返回 False。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> column_name(s) <span class="hljs-keyword">FROM</span> table_name<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">EXISTS</span> (<span class="hljs-keyword">SELECT</span> column_name <span class="hljs-keyword">FROM</span> table_name <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">condition</span>);<br></code></pre></td></tr></table></figure><h2 id="9、UNION"><a href="#9、UNION" class="headerlink" title="9、UNION"></a>9、UNION</h2><p>UNION操作符<strong>合并两个或多个 SELECT 语句的结果</strong>（组合查询），内部的每个 SELECT 语句必须拥有相同数量的列。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> _column_name(s)_ <span class="hljs-keyword">FROM</span> _table1_  <br><span class="hljs-keyword">UNION</span>  <br><span class="hljs-keyword">SELECT</span> _column_name(s)_ <span class="hljs-keyword">FROM</span> _table2_;<br></code></pre></td></tr></table></figure><h2 id="10、JOIN"><a href="#10、JOIN" class="headerlink" title="10、JOIN"></a>10、JOIN</h2><img src="https://gzy-gallery.oss-cn-shanghai.aliyuncs.com/img/sql-join.png" style="display:block;margin:0 auto;zoom: 50%;"><h2 id="11、CASE-WHEN"><a href="#11、CASE-WHEN" class="headerlink" title="11、CASE WHEN"></a>11、CASE WHEN</h2><p>CASE WHEN语句能在SQL语句中织入判断逻辑。<br>简单函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CASE 字段 WHEN 预期值 THEN 结果1 ELSE 结果2 END<br></code></pre></td></tr></table></figure><p>表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Mysql">CASE <br>WHEN condition1 THEN result1  <br>WHEN condition2 THEN result2<br>...<br>ELSE resultn<br>END<br></code></pre></td></tr></table></figure><h2 id="12、IF"><a href="#12、IF" class="headerlink" title="12、IF"></a>12、IF</h2><p>IF函数也能通过判断条件来返回特定值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs MYSQL">IF(expr,result_true,result_false)<br></code></pre></td></tr></table></figure><h2 id="13、字符串函数"><a href="#13、字符串函数" class="headerlink" title="13、字符串函数"></a>13、字符串函数</h2><p><strong>CONCAT</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs MYSQL">CONCAT(column|str1, column|str2,...)<br></code></pre></td></tr></table></figure><p><strong>SUBSTRING_INDEX</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Mysql">SUBSTRING_INDEX(str, delimiter, count)<br></code></pre></td></tr></table></figure><ul><li><code>count&gt;0</code>，从左计数；<code>count&lt;0</code>，从右计数；</li></ul><h2 id="14、窗口函数"><a href="#14、窗口函数" class="headerlink" title="14、窗口函数"></a>14、窗口函数</h2><p>窗口函数这里的“窗口”表示范围，可以理解为将原数据划分范围，即分组，然后用函数实现某些目的。</p><ul><li>专用窗口函数：rank()，dense_rank()，row_number()</li><li>汇总函数：max()，min()，count()，sum()，avg()</li></ul><p><strong>RANK</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs MYSQL"># 按班级分类，将成绩降序排序<br>SELECT _column_name_,<br>rank() over (PARTITION BY 班级 ORDER BY 成绩 DESC) AS ranking  <br>FROM table_name; <br></code></pre></td></tr></table></figure><ul><li><code>rank()</code>是排序函数，括号中不需要有参数；</li><li>通过<code>partition by</code>将班级分类，相当于之前用过的group by子句功能，但是group by子句分类汇总会改变原数据的行数，而用窗口函数自救保持原行数；</li><li>通过order by将成绩降序排列，与之前学的order by子句用法一样，后边可以升序asc或者降序desc；</li></ul><p>**DENSE_RANK(), ROW_NUMBER()**：<br>与rank相同：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT _column_name_,<br>dense_rank() over ( PARTITION BY 班级 ORDER BY 成绩 DESC) AS ranking  <br>FROM table_name;  <br>SELECT _column_name_,<br>row_number() over ( PARTITION BY 班级 ORDER BY 成绩 DESC) AS ranking  <br>FROM table_name; <br></code></pre></td></tr></table></figure><p>区别：</p><ul><li>在<code>rank()</code>函数，如果有并列情况，会占用下一个名次的位置，比如成绩为100的学生有三个并列第一，那么99分的学生是第二名，名次是：1,1,1,4；</li><li>在<code>dense_rank()</code>函数中，如果有并列的情况，不会占用下一个名词，同用上个例子，名次是：1,1,1,2；</li><li>在<code>row_number()</code>函数中，会忽略并列的情况，同用上述例子，名次是：1,2,3,4;</li></ul>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell脚本</title>
    <link href="/2022/03/17/%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/Shell/"/>
    <url>/2022/03/17/%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/Shell/</url>
    
    <content type="html"><![CDATA[<h1 id="Shell脚本"><a href="#Shell脚本" class="headerlink" title="Shell脚本"></a>Shell脚本</h1><p>Shell 脚本（shell script），是一种为 shell 编写的脚本程序。</p><p>首先建立一个简单的shell脚本<code>test.sh</code>来感受下：</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span>  <br>echo &quot;Hello World !&quot;<br></code></pre></td></tr></table></figure><ul><li><code>#!</code>是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种 Shell。</li><li><code>echo</code>：命令用于向窗口输出文本。</li></ul><p>运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sh ./test.sh<br></code></pre></td></tr></table></figure><h2 id="1、变量"><a href="#1、变量" class="headerlink" title="1、变量"></a>1、变量</h2><p><strong>变量的定义</strong>：</p><ol><li>定义变量时，变量名不加美元符号；</li><li>变量名和等号之间不能有空格；</li></ol><p><strong>变量的使用</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">your_name=&quot;abc&quot;  <br>echo $your_name  <br>echo $&#123;your_name&#125;<br></code></pre></td></tr></table></figure><ul><li>加花括号是为了帮助解释器识别变量的边界，最好加上。</li></ul><p><strong>设定只读变量</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">url=&quot;https://www.google.com&quot;  <br>readonly url<br></code></pre></td></tr></table></figure><p><strong>删除变量</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">unset variable_name<br></code></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>1、主要建立方式：</p><ul><li>单引号：<code>str=&#39;this is a string&#39;</code>。限制条件是单引号字符串中的变量是无效的；</li><li>双引号：<code>str=&quot;this is a string&quot;</code>。能够使用变量以及转义符；<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">your_name=&quot;runoob&quot;  <br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用双引号拼接</span>  <br>greeting=&quot;hello, &quot;$your_name&quot; !&quot;  <br>greeting_1=&quot;hello, $&#123;your_name&#125; !&quot;  <br>echo $greeting $greeting_1  <br><span class="hljs-meta prompt_">  </span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用单引号拼接</span>  <br>greeting_2=&#x27;hello, &#x27;$your_name&#x27; !&#x27;  <br>greeting_3=&#x27;hello, $&#123;your_name&#125; !&#x27;  <br>echo $greeting_2 $greeting_3<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">结果：</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">hello, runoob ! hello, runoob !</span> <br><span class="hljs-meta prompt_"># </span><span class="language-bash">hello, runoob ! hello, <span class="hljs-variable">$&#123;your_name&#125;</span> !</span><br></code></pre></td></tr></table></figure></li></ul><p>2、获取字符串长度：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">string=&quot;abcd&quot;  <br>echo $&#123;#string&#125; # 输出 4<br></code></pre></td></tr></table></figure><p>3、提取子字符串：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">string=&quot;runoob is a great site&quot;  <br>echo $&#123;string:1:4&#125; # 输出 unoo<br></code></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>1、构建：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">array_name=(value0 value1 value2 value3)<br></code></pre></td></tr></table></figure><p>2、读取数组的元素：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash">&#123;数组名[下标]&#125;</span><br></code></pre></td></tr></table></figure><ul><li><code>$&#123;array_name[@]&#125;</code>，获取所有元素</li></ul><p>3、获取数组长度：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">取得数组元素的个数</span>  <br>length=$&#123;#array_name[@]&#125;  <br><span class="hljs-meta prompt_"># </span><span class="language-bash">或者</span>  <br>length=$&#123;#array_name[*]&#125;  <br><span class="hljs-meta prompt_"># </span><span class="language-bash">取得数组单个元素的长度</span>  <br>lengthn=$&#123;#array_name[n]&#125;<br></code></pre></td></tr></table></figure><h2 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h2><p>向脚本传参数，脚本内获取参数的格式为<code>$n</code>。<code>n=1</code>表示脚本传递的第一个参数，以此类推。<code>n=0</code>表示执行的文件名。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><br>echo &quot;Hello World !&quot;<br>echo &quot;文件名：$0&quot;<br>echo &quot;参数1: $1&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">输出</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Hello World !</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">文件名：test.sh</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">参数1: aa</span><br></code></pre></td></tr></table></figure><h2 id="基本运算符"><a href="#基本运算符" class="headerlink" title="基本运算符"></a>基本运算符</h2><p><code>expr</code>是一款表达式计算工具，使用它能完成表达式的求值操作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">val=`expr 2 + 2`<br>echo &quot;两数之和为：$val&quot;<br></code></pre></td></tr></table></figure><ul><li>采用反引号；</li><li>数字与运算符要有空格；</li></ul><p><strong>算数运算符</strong>：乘号前边必须加反斜杠才能实现乘法运算</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">a=10  <br>b=20<br>val=`expr $a \* $b`  <br>echo &quot;a * b : $val&quot;<br></code></pre></td></tr></table></figure><p><strong>关系运算符</strong>：</p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">-eq</td><td align="left">检测两个数是否相等，相等返回 true。</td><td align="left">[ $a -eq $b ] 返回 false。</td></tr><tr><td align="left">-ne</td><td align="left">检测两个数是否不相等，不相等返回 true。</td><td align="left">[ $a -ne $b ] 返回 true。</td></tr><tr><td align="left">-gt</td><td align="left">检测左边的数是否大于右边的，如果是，则返回 true。</td><td align="left">[ $a -gt $b ] 返回 false。</td></tr><tr><td align="left">-lt</td><td align="left">检测左边的数是否小于右边的，如果是，则返回 true。</td><td align="left">[ $a -lt $b ] 返回 true。</td></tr><tr><td align="left">-ge</td><td align="left">检测左边的数是否大于等于右边的，如果是，则返回 true。</td><td align="left">[ $a -ge $b ] 返回 false。</td></tr><tr><td align="left">-le</td><td align="left">检测左边的数是否小于等于右边的，如果是，则返回 true。</td><td align="left">[ $a -le $b ] 返回 true。</td></tr></tbody></table><p><strong>字符串运算符</strong>：</p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">&#x3D;</td><td align="left">检测两个字符串是否相等，相等返回 true。</td><td align="left">[ $a &#x3D; $b ] 返回 false。</td></tr><tr><td align="left">!&#x3D;</td><td align="left">检测两个字符串是否不相等，不相等返回 true。</td><td align="left">[ $a !&#x3D; $b ] 返回 true。</td></tr><tr><td align="left">-z</td><td align="left">检测字符串长度是否为0，为0返回 true。</td><td align="left">[ -z $a ] 返回 false。</td></tr><tr><td align="left">-n</td><td align="left">检测字符串长度是否不为 0，不为 0 返回 true。</td><td align="left">[ -n “$a” ] 返回 true。</td></tr><tr><td align="left">$</td><td align="left">检测字符串是否为空，不为空返回 true。</td><td align="left">[ $a ] 返回 true。</td></tr></tbody></table><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p>1、<strong>if else语句</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">if condition<br>then<br>    command1 <br>elif condition2<br>then<br>    command2<br>    ...<br>    commandN<br>else<br>    command <br>fi<br></code></pre></td></tr></table></figure><p>2、<strong>for循环</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">for var in item1 item2 ... itemN<br>do<br>    command1<br>    command2<br>    ...<br>    commandN<br>done<br></code></pre></td></tr></table></figure><p>3、<strong>while循环</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">while condition<br>do<br>    command<br>done<br></code></pre></td></tr></table></figure><h2 id="输入输出重定向"><a href="#输入输出重定向" class="headerlink" title="输入输出重定向"></a>输入输出重定向</h2><table><thead><tr><th align="left">命令</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">command &gt; file</td><td align="left">将输出重定向到 file。</td></tr><tr><td align="left">command &lt; file</td><td align="left">将输入重定向到 file。</td></tr><tr><td align="left">command &gt;&gt; file</td><td align="left">将输出以追加的方式重定向到 file。</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>echo &quot;aaa&quot; &gt; 1.txt<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux常用命令</title>
    <link href="/2022/03/17/%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/03/17/%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>本篇博客主要是为了方便自己快速查找相关的Linux命令。</p><span id="more"></span><h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><ul><li><p>touch：创建文件</p></li><li><p>rm -rf file：删除非空目录</p></li><li><p>mv now_file new_file：移动&#x2F;更改文件名</p></li><li><p>cp：复制</p></li><li><p>cat -n file_name：查看文件，显示行号</p></li><li><p>head -10 file_name：显示文件前10行内容</p></li><li><p>tail 10 file_name：显示文件最后10行内容</p></li><li><p>diff file1 file2：查看两个文件的差别，以逐行的方式，比较文本文件的异同处</p></li><li><p>file file_name：显示文件类型</p></li><li><p>chmod</p><img src="https://gzy-gallery.oss-cn-shanghai.aliyuncs.com/img/20220317204218.png" style="display:block;margin:0 auto;zoom: 40%;"></li></ul><h2 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h2><ul><li>mkdir：创建文件夹</li><li>pwd：显示当前路径</li><li>ls -lrt：按时间排序，以列表的方式显示目录</li><li>ls -a：显示所有文件（包括隐藏）</li><li>tree：已树状图列出当前目录</li></ul><h2 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h2><ul><li>kill：杀死进程，最常用的信号为：<ul><li>1 (HUP)：重新加载进程</li><li>9 (KILL)：杀死一个进程</li><li>15 (TERM)：正常停止一个进程</li></ul></li><li>ps：用于显示当前进程的状态，<code>ps aux | grep 进程关键字(redis等)</code></li><li>top：实时显示进程的动态</li></ul><h2 id="压缩备份"><a href="#压缩备份" class="headerlink" title="压缩备份"></a>压缩备份</h2><ul><li>gzip：文件经它压缩过后，其名称后面会多出<code>.gz</code>的扩展名</li><li>zip：压缩后的文件后缀名为<code>.zip</code></li><li>unzip：为<code>.zip</code>压缩文件的解压缩程序</li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
